using System.Drawing;
using System.Drawing.Imaging;
using System.IO;

namespace BluwolfIcons
{
	/// <summary>
	/// A PNG (Portable Network Graphics) image inside an icon.
	/// </summary>
	public sealed class PngIconImage : IIconImage
	{
		/// <summary>
		/// The original image.
		/// </summary>
		public Bitmap OriginalImage { get; set; }

		/// <summary>
		/// This image's width.
		/// </summary>
		public int Width => OriginalImage.Width;

		/// <summary>
		/// This image's height.
		/// </summary>
		public int Height => OriginalImage.Height;

		/// <summary>
		/// This image's bits per pixel.
		/// </summary>
		public int BitsPerPixel => Image.GetPixelFormatSize(OriginalImage.PixelFormat);

		/// <summary>
		/// Creates a new PNG icon image, with <paramref name="image"/> as its original image.
		/// </summary>
		/// <param name="image">The original image to use in this icon image.</param>
		public PngIconImage(Bitmap image)
		{
			OriginalImage = image;
		}

		/// <summary>
		/// Gets the PNG icon image data for this image.
		/// </summary>
		/// <returns>The PNG icon image data for this image.</returns>
		public byte[] GetData()
		{
			// PNG images are represented just like in a normal file, so all we do is save to a MemoryStream and return the generated bytes.
			using (var stream = new MemoryStream())
			{
				OriginalImage.Save(stream, ImageFormat.Png);
				return stream.GetBuffer();
			}
		}

		#region IDisposable Support
		private bool disposedValue = false; // To detect redundant calls

		private void Dispose(bool disposing)
		{
			if (!disposedValue)
			{
				if (disposing)
				{
					OriginalImage.Dispose();
				}

				disposedValue = true;
			}
		}

		/// <summary>
		/// Disposes of this <see cref="PngIconImage"/> and the <see cref="OriginalImage"/> associated with it.
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
		}
		#endregion
	}
}
